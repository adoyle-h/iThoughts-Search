#!/usr/bin/env bash
# shellcheck disable=SC1090,SC2155
set -o errexit
set -o errtrace
set -o nounset
set -o pipefail
[[ -n "${XTRACE+x}" ]] && set -o xtrace

readonly SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"

source "$SCRIPT_DIR"/env.bash

create_ref() {
  local filepath=$1
  local refDir=$2
  unzip -p "$filepath" mapdata.xml | ag -o --nocolor '(?<=text=").+?(?=")' > "$refDir"/data
}

get_cksum() {
  local filepath=$1
  cksum "$filepath" | cut -d ' ' -f 1
}

create_cksum() {
  local filepath=$1
  local refDir=$2
  get_cksum "$filepath" > "$refDir"/cksum
}

is_itmz_nochange() {
  local filepath=$1
  local refDir=$2

  if [[ ! -r "$refDir"/cksum ]]; then
    echo "$refDir/cksum not existed. To create cksum..." >> "$ITMZ_LOG"
    echo "To add new file=${filepath} to ref"
    return 1
  fi

  local cksum=$(get_cksum "$filepath")
  local old_cksum=$(cat "$refDir"/cksum)
  if [[ "$old_cksum" != "$cksum" ]]; then
    echo "[cksum=$cksum] != [$refDir/cksum=$(cat "$refDir"/cksum)]" >> "$ITMZ_LOG"
    echo "File=${filepath} content changed, to refresh ref. ${old_cksum} => ${cksum}"
    return 1
  fi

  return 0
}

iterator() {
  local filepath=$1
  local refDir=$ITMZ_REF_DIR/"$filepath"

  {
    echo "[filepath=${filepath}]"; \
    echo "[refDir=${refDir}]"; \
  } >> "$ITMZ_LOG"

  mkdir -p "$refDir"

  if is_itmz_nochange "$filepath" "$refDir"; then
    echo "File content no change: $filepath" >> "$ITMZ_LOG"
    return 0
  else
    echo "File content has changed: $filepath" >> "$ITMZ_LOG"
  fi

  create_ref "${filepath}" "$refDir"
  create_cksum "${filepath}" "$refDir"
}

usage() { "$SCRIPT_DIR"/search-usage; }

declare -A dispatch_cmd_opts
declare -a dispatch_cmd_args

opt_parse() {
  while [ $# -gt 0 ];do
    case $1 in
      --cache-clean)
        dispatch_cmd_opts[cache-clean]=true
        ;;
      -l)
        dispatch_cmd_opts[list-file]=true
        ;;
      --list-file)
        dispatch_cmd_opts[list-file]=true
        ;;
      -h)
        dispatch_cmd_opts[help]=true
        ;;
      --help)
        dispatch_cmd_opts[help]=true
        ;;
      *)
        dispatch_cmd_args+=($1)
        ;;
    esac
    shift
  done

  # declare -p dispatch_cmd_opts
}

main() {
  opt_parse "$@"

  if [[ ${dispatch_cmd_opts[help]:-} == true ]]; then
    usage
    exit 0
  fi

  if [[ ${dispatch_cmd_opts[cache-clean]:-} == true ]]; then
    "$SCRIPT_DIR"/clean
    exit 0
  fi

  local pattern=${dispatch_cmd_args[0]:-}

  if [[ -z $pattern ]]; then
    usage
    exit 0
  fi

  local dir=${dispatch_cmd_args[1]:-}
  local search_dir=$(realpath "$ITMZ_DIR"/"$dir")

  echo "[$APP_NAME] To search pattern=${pattern} in dir=${search_dir}"

  if [[ -z "$search_dir" ]]; then
    echo "[$APP_NAME] search_dir is empty" >&2
    exit 1
  fi

  if [[ ! -e "$search_dir" ]]; then
    echo "[$APP_NAME] No such directory: $search_dir" >&2
    exit 1
  fi

  mkdir -p "$ITMZ_HOME"
  date > "$ITMZ_LOG"

  while read -r -d '' filepath; do
    iterator "$filepath"
  done < <(find "$search_dir" -type f -name '*.itmz' -print0)

  local IFS=$'\n'
  local no_matched=0
  files=($(ag -l --nocolor "$pattern" "$ITMZ_REF_DIR""$search_dir")) || if [[ $? == 1 ]]; then no_matched=1; else exit $?; fi

  if [[ $no_matched == 1 ]]; then
    echo "No matched content for pattern \"$pattern\"" >&2
  else
    if [[ ${dispatch_cmd_opts[list-file]:-} == true ]]; then
      echo ""
      for i in "${!files[@]}"; do
        local file=${files[i]}
        echo "${file}" | sed -e "s|^${ITMZ_REF_DIR}|[$((i+1))] ${LIGHT_GREEN}|g" -e "s|/data$|${RESET_COLOR}|g"
      done

      exit 0
    fi

    for i in "${!files[@]}"; do
      local file=${files[i]}
      echo ""
      echo "${file}" | sed -e "s|^${ITMZ_REF_DIR}|[$((i+1))] ${LIGHT_GREEN}|g" -e "s|/data$|${RESET_COLOR}|g"
      ag "$pattern" "$file"
    done
  fi
}

main "${@}"
